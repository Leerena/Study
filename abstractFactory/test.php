<?php

include 'autoload.php';

	
$types = new Poultry();
$animal = $types->makeCanidae();
$call = $animal->call();
	
/**
 *抽象工厂(Abstract Factory)是应对产品族概念的。
 *比如说，每个汽车公司可能要同时生产轿车、跑车、货车、客车，那么每一个工厂都要有创建轿车，货车和客车的方法。
 *
 *产品等级：同一个产品的不同分类或者组成。
 *产品族：是指位于不同产品等级结构中，功能相关联的产品组成的家族。
 *
 *例如：AMD的主板、芯片组、CPU组成一个家族，Intel的主板、芯片组、CPU组成一个家族。
 *而这两个家族都来自于三个产品等级：主板、芯片组、CPU。
 *
 *使用抽象工厂模式还要满足一下条件：
 *1.系统中有多个产品族，而系统一次只可能消费其中一族产品
 *2.同属于同一个产品族的产品以其使用。
 *来看看抽象工厂模式的各个角色（和工厂方法的如出一辙）：
 *抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。它由抽象类或者接口来实现。
 *具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。
 *抽象产品角色：它是具体产品继承的父类或者是实现的接口。一般有抽象类或者接口来实现。
 *具体产品角色：具体工厂角色所创建的对象就是此角色的实例。由具体的类来实现。
 */

?>